// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.28.2
// source: user_service.proto

package workgame

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	UserService_DepartmentCreate_FullMethodName          = "/workgame.UserService/DepartmentCreate"
	UserService_DepartmentRead_FullMethodName            = "/workgame.UserService/DepartmentRead"
	UserService_DepartmentUpdate_FullMethodName          = "/workgame.UserService/DepartmentUpdate"
	UserService_DepartmentDelete_FullMethodName          = "/workgame.UserService/DepartmentDelete"
	UserService_DepartmentList_FullMethodName            = "/workgame.UserService/DepartmentList"
	UserService_SelfUserRegister_FullMethodName          = "/workgame.UserService/SelfUserRegister"
	UserService_SelfUserRead_FullMethodName              = "/workgame.UserService/SelfUserRead"
	UserService_SelfUserUpdate_FullMethodName            = "/workgame.UserService/SelfUserUpdate"
	UserService_SelfUserDelete_FullMethodName            = "/workgame.UserService/SelfUserDelete"
	UserService_ChangePassword_FullMethodName            = "/workgame.UserService/ChangePassword"
	UserService_AdminUserRegister_FullMethodName         = "/workgame.UserService/AdminUserRegister"
	UserService_AdminUserReadByUUID_FullMethodName       = "/workgame.UserService/AdminUserReadByUUID"
	UserService_AdminUserReadByUsername_FullMethodName   = "/workgame.UserService/AdminUserReadByUsername"
	UserService_AdminUserUpdateByUUID_FullMethodName     = "/workgame.UserService/AdminUserUpdateByUUID"
	UserService_AdminUserUpdateByUsername_FullMethodName = "/workgame.UserService/AdminUserUpdateByUsername"
	UserService_AdminUserDeleteByUUID_FullMethodName     = "/workgame.UserService/AdminUserDeleteByUUID"
	UserService_AdminUserDeleteByUsername_FullMethodName = "/workgame.UserService/AdminUserDeleteByUsername"
	UserService_AdminUserList_FullMethodName             = "/workgame.UserService/AdminUserList"
	UserService_Login_FullMethodName                     = "/workgame.UserService/Login"
	UserService_Logout_FullMethodName                    = "/workgame.UserService/Logout"
	UserService_ValidateToken_FullMethodName             = "/workgame.UserService/ValidateToken"
	UserService_GetRSA256PublicKey_FullMethodName        = "/workgame.UserService/GetRSA256PublicKey"
	UserService_RefreshToken_FullMethodName              = "/workgame.UserService/RefreshToken"
)

// UserServiceClient is the client API for UserService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// Auth is service for managing permissions and roles.
type UserServiceClient interface {
	// Department cruder
	DepartmentCreate(ctx context.Context, in *DepartmentCreateRequest, opts ...grpc.CallOption) (*DepartmentCreateResponse, error)
	DepartmentRead(ctx context.Context, in *DepartmentReadRequest, opts ...grpc.CallOption) (*DepartmentReadResponse, error)
	DepartmentUpdate(ctx context.Context, in *DepartmentUpdateRequest, opts ...grpc.CallOption) (*DepartmentUpdateResponse, error)
	DepartmentDelete(ctx context.Context, in *DepartmentDeleteRequest, opts ...grpc.CallOption) (*DepartmentDeleteResponse, error)
	DepartmentList(ctx context.Context, in *DepartmentListRequest, opts ...grpc.CallOption) (*DepartmentListResponse, error)
	// SelfUserCruder
	SelfUserRegister(ctx context.Context, in *SelfUserRegisterRequest, opts ...grpc.CallOption) (*SelfUserRegisterResponse, error)
	SelfUserRead(ctx context.Context, in *SelfUserReadRequest, opts ...grpc.CallOption) (*SelfUserReadResponse, error)
	SelfUserUpdate(ctx context.Context, in *SelfUserUpdateRequest, opts ...grpc.CallOption) (*SelfUserUpdateResponse, error)
	SelfUserDelete(ctx context.Context, in *SelfUserDeleteRequest, opts ...grpc.CallOption) (*SelfUserDeleteResponse, error)
	// UserPasswordChanging
	ChangePassword(ctx context.Context, in *ChangePasswordRequest, opts ...grpc.CallOption) (*ChangePasswordResponse, error)
	// User management for admin
	AdminUserRegister(ctx context.Context, in *AdminUserRegisterRequest, opts ...grpc.CallOption) (*AdminUserRegisterResponse, error)
	AdminUserReadByUUID(ctx context.Context, in *AdminUserReadByUUIDRequest, opts ...grpc.CallOption) (*AdminUserReadByUUIDResponse, error)
	AdminUserReadByUsername(ctx context.Context, in *AdminUserReadByUsernameRequest, opts ...grpc.CallOption) (*AdminUserReadByUsernameResponse, error)
	AdminUserUpdateByUUID(ctx context.Context, in *AdminUserUpdateByUUIDRequest, opts ...grpc.CallOption) (*AdminUserUpdateByUUIDResponse, error)
	AdminUserUpdateByUsername(ctx context.Context, in *AdminUserUpdateByUsernameRequest, opts ...grpc.CallOption) (*AdminUserUpdateByUsernameResponse, error)
	AdminUserDeleteByUUID(ctx context.Context, in *AdminUserDeleteByUUIDRequest, opts ...grpc.CallOption) (*AdminUserDeleteByUUIDResponse, error)
	AdminUserDeleteByUsername(ctx context.Context, in *AdminUserDeleteByUsernameRequest, opts ...grpc.CallOption) (*AdminUserDeleteByUsernameResponse, error)
	AdminUserList(ctx context.Context, in *AdminUserListRequest, opts ...grpc.CallOption) (*AdminUserListResponse, error)
	// Login logs in a user and returns an auth token.
	Login(ctx context.Context, in *LoginRequest, opts ...grpc.CallOption) (*LoginResponse, error)
	// Logout logs out a user and revokes their auth token.
	Logout(ctx context.Context, in *LogoutRequest, opts ...grpc.CallOption) (*LogoutResponse, error)
	// ValidateToken validates a user's auth token.
	ValidateToken(ctx context.Context, in *ValidateTokenRequest, opts ...grpc.CallOption) (*ValidateTokenResponse, error)
	GetRSA256PublicKey(ctx context.Context, in *GetRSA256PublicKeyRequest, opts ...grpc.CallOption) (*GetRSA256PublicKeyResponse, error)
	// RefreshToken refreshes a user's auth token.
	RefreshToken(ctx context.Context, in *RefreshTokenRequest, opts ...grpc.CallOption) (*RefreshTokenResponse, error)
}

type userServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewUserServiceClient(cc grpc.ClientConnInterface) UserServiceClient {
	return &userServiceClient{cc}
}

func (c *userServiceClient) DepartmentCreate(ctx context.Context, in *DepartmentCreateRequest, opts ...grpc.CallOption) (*DepartmentCreateResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DepartmentCreateResponse)
	err := c.cc.Invoke(ctx, UserService_DepartmentCreate_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) DepartmentRead(ctx context.Context, in *DepartmentReadRequest, opts ...grpc.CallOption) (*DepartmentReadResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DepartmentReadResponse)
	err := c.cc.Invoke(ctx, UserService_DepartmentRead_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) DepartmentUpdate(ctx context.Context, in *DepartmentUpdateRequest, opts ...grpc.CallOption) (*DepartmentUpdateResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DepartmentUpdateResponse)
	err := c.cc.Invoke(ctx, UserService_DepartmentUpdate_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) DepartmentDelete(ctx context.Context, in *DepartmentDeleteRequest, opts ...grpc.CallOption) (*DepartmentDeleteResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DepartmentDeleteResponse)
	err := c.cc.Invoke(ctx, UserService_DepartmentDelete_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) DepartmentList(ctx context.Context, in *DepartmentListRequest, opts ...grpc.CallOption) (*DepartmentListResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DepartmentListResponse)
	err := c.cc.Invoke(ctx, UserService_DepartmentList_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) SelfUserRegister(ctx context.Context, in *SelfUserRegisterRequest, opts ...grpc.CallOption) (*SelfUserRegisterResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SelfUserRegisterResponse)
	err := c.cc.Invoke(ctx, UserService_SelfUserRegister_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) SelfUserRead(ctx context.Context, in *SelfUserReadRequest, opts ...grpc.CallOption) (*SelfUserReadResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SelfUserReadResponse)
	err := c.cc.Invoke(ctx, UserService_SelfUserRead_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) SelfUserUpdate(ctx context.Context, in *SelfUserUpdateRequest, opts ...grpc.CallOption) (*SelfUserUpdateResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SelfUserUpdateResponse)
	err := c.cc.Invoke(ctx, UserService_SelfUserUpdate_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) SelfUserDelete(ctx context.Context, in *SelfUserDeleteRequest, opts ...grpc.CallOption) (*SelfUserDeleteResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SelfUserDeleteResponse)
	err := c.cc.Invoke(ctx, UserService_SelfUserDelete_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) ChangePassword(ctx context.Context, in *ChangePasswordRequest, opts ...grpc.CallOption) (*ChangePasswordResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ChangePasswordResponse)
	err := c.cc.Invoke(ctx, UserService_ChangePassword_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) AdminUserRegister(ctx context.Context, in *AdminUserRegisterRequest, opts ...grpc.CallOption) (*AdminUserRegisterResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AdminUserRegisterResponse)
	err := c.cc.Invoke(ctx, UserService_AdminUserRegister_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) AdminUserReadByUUID(ctx context.Context, in *AdminUserReadByUUIDRequest, opts ...grpc.CallOption) (*AdminUserReadByUUIDResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AdminUserReadByUUIDResponse)
	err := c.cc.Invoke(ctx, UserService_AdminUserReadByUUID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) AdminUserReadByUsername(ctx context.Context, in *AdminUserReadByUsernameRequest, opts ...grpc.CallOption) (*AdminUserReadByUsernameResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AdminUserReadByUsernameResponse)
	err := c.cc.Invoke(ctx, UserService_AdminUserReadByUsername_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) AdminUserUpdateByUUID(ctx context.Context, in *AdminUserUpdateByUUIDRequest, opts ...grpc.CallOption) (*AdminUserUpdateByUUIDResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AdminUserUpdateByUUIDResponse)
	err := c.cc.Invoke(ctx, UserService_AdminUserUpdateByUUID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) AdminUserUpdateByUsername(ctx context.Context, in *AdminUserUpdateByUsernameRequest, opts ...grpc.CallOption) (*AdminUserUpdateByUsernameResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AdminUserUpdateByUsernameResponse)
	err := c.cc.Invoke(ctx, UserService_AdminUserUpdateByUsername_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) AdminUserDeleteByUUID(ctx context.Context, in *AdminUserDeleteByUUIDRequest, opts ...grpc.CallOption) (*AdminUserDeleteByUUIDResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AdminUserDeleteByUUIDResponse)
	err := c.cc.Invoke(ctx, UserService_AdminUserDeleteByUUID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) AdminUserDeleteByUsername(ctx context.Context, in *AdminUserDeleteByUsernameRequest, opts ...grpc.CallOption) (*AdminUserDeleteByUsernameResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AdminUserDeleteByUsernameResponse)
	err := c.cc.Invoke(ctx, UserService_AdminUserDeleteByUsername_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) AdminUserList(ctx context.Context, in *AdminUserListRequest, opts ...grpc.CallOption) (*AdminUserListResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AdminUserListResponse)
	err := c.cc.Invoke(ctx, UserService_AdminUserList_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) Login(ctx context.Context, in *LoginRequest, opts ...grpc.CallOption) (*LoginResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(LoginResponse)
	err := c.cc.Invoke(ctx, UserService_Login_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) Logout(ctx context.Context, in *LogoutRequest, opts ...grpc.CallOption) (*LogoutResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(LogoutResponse)
	err := c.cc.Invoke(ctx, UserService_Logout_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) ValidateToken(ctx context.Context, in *ValidateTokenRequest, opts ...grpc.CallOption) (*ValidateTokenResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ValidateTokenResponse)
	err := c.cc.Invoke(ctx, UserService_ValidateToken_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) GetRSA256PublicKey(ctx context.Context, in *GetRSA256PublicKeyRequest, opts ...grpc.CallOption) (*GetRSA256PublicKeyResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetRSA256PublicKeyResponse)
	err := c.cc.Invoke(ctx, UserService_GetRSA256PublicKey_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) RefreshToken(ctx context.Context, in *RefreshTokenRequest, opts ...grpc.CallOption) (*RefreshTokenResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RefreshTokenResponse)
	err := c.cc.Invoke(ctx, UserService_RefreshToken_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UserServiceServer is the server API for UserService service.
// All implementations must embed UnimplementedUserServiceServer
// for forward compatibility.
//
// Auth is service for managing permissions and roles.
type UserServiceServer interface {
	// Department cruder
	DepartmentCreate(context.Context, *DepartmentCreateRequest) (*DepartmentCreateResponse, error)
	DepartmentRead(context.Context, *DepartmentReadRequest) (*DepartmentReadResponse, error)
	DepartmentUpdate(context.Context, *DepartmentUpdateRequest) (*DepartmentUpdateResponse, error)
	DepartmentDelete(context.Context, *DepartmentDeleteRequest) (*DepartmentDeleteResponse, error)
	DepartmentList(context.Context, *DepartmentListRequest) (*DepartmentListResponse, error)
	// SelfUserCruder
	SelfUserRegister(context.Context, *SelfUserRegisterRequest) (*SelfUserRegisterResponse, error)
	SelfUserRead(context.Context, *SelfUserReadRequest) (*SelfUserReadResponse, error)
	SelfUserUpdate(context.Context, *SelfUserUpdateRequest) (*SelfUserUpdateResponse, error)
	SelfUserDelete(context.Context, *SelfUserDeleteRequest) (*SelfUserDeleteResponse, error)
	// UserPasswordChanging
	ChangePassword(context.Context, *ChangePasswordRequest) (*ChangePasswordResponse, error)
	// User management for admin
	AdminUserRegister(context.Context, *AdminUserRegisterRequest) (*AdminUserRegisterResponse, error)
	AdminUserReadByUUID(context.Context, *AdminUserReadByUUIDRequest) (*AdminUserReadByUUIDResponse, error)
	AdminUserReadByUsername(context.Context, *AdminUserReadByUsernameRequest) (*AdminUserReadByUsernameResponse, error)
	AdminUserUpdateByUUID(context.Context, *AdminUserUpdateByUUIDRequest) (*AdminUserUpdateByUUIDResponse, error)
	AdminUserUpdateByUsername(context.Context, *AdminUserUpdateByUsernameRequest) (*AdminUserUpdateByUsernameResponse, error)
	AdminUserDeleteByUUID(context.Context, *AdminUserDeleteByUUIDRequest) (*AdminUserDeleteByUUIDResponse, error)
	AdminUserDeleteByUsername(context.Context, *AdminUserDeleteByUsernameRequest) (*AdminUserDeleteByUsernameResponse, error)
	AdminUserList(context.Context, *AdminUserListRequest) (*AdminUserListResponse, error)
	// Login logs in a user and returns an auth token.
	Login(context.Context, *LoginRequest) (*LoginResponse, error)
	// Logout logs out a user and revokes their auth token.
	Logout(context.Context, *LogoutRequest) (*LogoutResponse, error)
	// ValidateToken validates a user's auth token.
	ValidateToken(context.Context, *ValidateTokenRequest) (*ValidateTokenResponse, error)
	GetRSA256PublicKey(context.Context, *GetRSA256PublicKeyRequest) (*GetRSA256PublicKeyResponse, error)
	// RefreshToken refreshes a user's auth token.
	RefreshToken(context.Context, *RefreshTokenRequest) (*RefreshTokenResponse, error)
	mustEmbedUnimplementedUserServiceServer()
}

// UnimplementedUserServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedUserServiceServer struct{}

func (UnimplementedUserServiceServer) DepartmentCreate(context.Context, *DepartmentCreateRequest) (*DepartmentCreateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DepartmentCreate not implemented")
}
func (UnimplementedUserServiceServer) DepartmentRead(context.Context, *DepartmentReadRequest) (*DepartmentReadResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DepartmentRead not implemented")
}
func (UnimplementedUserServiceServer) DepartmentUpdate(context.Context, *DepartmentUpdateRequest) (*DepartmentUpdateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DepartmentUpdate not implemented")
}
func (UnimplementedUserServiceServer) DepartmentDelete(context.Context, *DepartmentDeleteRequest) (*DepartmentDeleteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DepartmentDelete not implemented")
}
func (UnimplementedUserServiceServer) DepartmentList(context.Context, *DepartmentListRequest) (*DepartmentListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DepartmentList not implemented")
}
func (UnimplementedUserServiceServer) SelfUserRegister(context.Context, *SelfUserRegisterRequest) (*SelfUserRegisterResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SelfUserRegister not implemented")
}
func (UnimplementedUserServiceServer) SelfUserRead(context.Context, *SelfUserReadRequest) (*SelfUserReadResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SelfUserRead not implemented")
}
func (UnimplementedUserServiceServer) SelfUserUpdate(context.Context, *SelfUserUpdateRequest) (*SelfUserUpdateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SelfUserUpdate not implemented")
}
func (UnimplementedUserServiceServer) SelfUserDelete(context.Context, *SelfUserDeleteRequest) (*SelfUserDeleteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SelfUserDelete not implemented")
}
func (UnimplementedUserServiceServer) ChangePassword(context.Context, *ChangePasswordRequest) (*ChangePasswordResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChangePassword not implemented")
}
func (UnimplementedUserServiceServer) AdminUserRegister(context.Context, *AdminUserRegisterRequest) (*AdminUserRegisterResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AdminUserRegister not implemented")
}
func (UnimplementedUserServiceServer) AdminUserReadByUUID(context.Context, *AdminUserReadByUUIDRequest) (*AdminUserReadByUUIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AdminUserReadByUUID not implemented")
}
func (UnimplementedUserServiceServer) AdminUserReadByUsername(context.Context, *AdminUserReadByUsernameRequest) (*AdminUserReadByUsernameResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AdminUserReadByUsername not implemented")
}
func (UnimplementedUserServiceServer) AdminUserUpdateByUUID(context.Context, *AdminUserUpdateByUUIDRequest) (*AdminUserUpdateByUUIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AdminUserUpdateByUUID not implemented")
}
func (UnimplementedUserServiceServer) AdminUserUpdateByUsername(context.Context, *AdminUserUpdateByUsernameRequest) (*AdminUserUpdateByUsernameResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AdminUserUpdateByUsername not implemented")
}
func (UnimplementedUserServiceServer) AdminUserDeleteByUUID(context.Context, *AdminUserDeleteByUUIDRequest) (*AdminUserDeleteByUUIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AdminUserDeleteByUUID not implemented")
}
func (UnimplementedUserServiceServer) AdminUserDeleteByUsername(context.Context, *AdminUserDeleteByUsernameRequest) (*AdminUserDeleteByUsernameResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AdminUserDeleteByUsername not implemented")
}
func (UnimplementedUserServiceServer) AdminUserList(context.Context, *AdminUserListRequest) (*AdminUserListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AdminUserList not implemented")
}
func (UnimplementedUserServiceServer) Login(context.Context, *LoginRequest) (*LoginResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Login not implemented")
}
func (UnimplementedUserServiceServer) Logout(context.Context, *LogoutRequest) (*LogoutResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Logout not implemented")
}
func (UnimplementedUserServiceServer) ValidateToken(context.Context, *ValidateTokenRequest) (*ValidateTokenResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ValidateToken not implemented")
}
func (UnimplementedUserServiceServer) GetRSA256PublicKey(context.Context, *GetRSA256PublicKeyRequest) (*GetRSA256PublicKeyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRSA256PublicKey not implemented")
}
func (UnimplementedUserServiceServer) RefreshToken(context.Context, *RefreshTokenRequest) (*RefreshTokenResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RefreshToken not implemented")
}
func (UnimplementedUserServiceServer) mustEmbedUnimplementedUserServiceServer() {}
func (UnimplementedUserServiceServer) testEmbeddedByValue()                     {}

// UnsafeUserServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to UserServiceServer will
// result in compilation errors.
type UnsafeUserServiceServer interface {
	mustEmbedUnimplementedUserServiceServer()
}

func RegisterUserServiceServer(s grpc.ServiceRegistrar, srv UserServiceServer) {
	// If the following call pancis, it indicates UnimplementedUserServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&UserService_ServiceDesc, srv)
}

func _UserService_DepartmentCreate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DepartmentCreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).DepartmentCreate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_DepartmentCreate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).DepartmentCreate(ctx, req.(*DepartmentCreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_DepartmentRead_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DepartmentReadRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).DepartmentRead(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_DepartmentRead_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).DepartmentRead(ctx, req.(*DepartmentReadRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_DepartmentUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DepartmentUpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).DepartmentUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_DepartmentUpdate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).DepartmentUpdate(ctx, req.(*DepartmentUpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_DepartmentDelete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DepartmentDeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).DepartmentDelete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_DepartmentDelete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).DepartmentDelete(ctx, req.(*DepartmentDeleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_DepartmentList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DepartmentListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).DepartmentList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_DepartmentList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).DepartmentList(ctx, req.(*DepartmentListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_SelfUserRegister_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SelfUserRegisterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).SelfUserRegister(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_SelfUserRegister_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).SelfUserRegister(ctx, req.(*SelfUserRegisterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_SelfUserRead_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SelfUserReadRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).SelfUserRead(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_SelfUserRead_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).SelfUserRead(ctx, req.(*SelfUserReadRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_SelfUserUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SelfUserUpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).SelfUserUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_SelfUserUpdate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).SelfUserUpdate(ctx, req.(*SelfUserUpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_SelfUserDelete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SelfUserDeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).SelfUserDelete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_SelfUserDelete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).SelfUserDelete(ctx, req.(*SelfUserDeleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_ChangePassword_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChangePasswordRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).ChangePassword(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_ChangePassword_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).ChangePassword(ctx, req.(*ChangePasswordRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_AdminUserRegister_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AdminUserRegisterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).AdminUserRegister(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_AdminUserRegister_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).AdminUserRegister(ctx, req.(*AdminUserRegisterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_AdminUserReadByUUID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AdminUserReadByUUIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).AdminUserReadByUUID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_AdminUserReadByUUID_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).AdminUserReadByUUID(ctx, req.(*AdminUserReadByUUIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_AdminUserReadByUsername_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AdminUserReadByUsernameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).AdminUserReadByUsername(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_AdminUserReadByUsername_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).AdminUserReadByUsername(ctx, req.(*AdminUserReadByUsernameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_AdminUserUpdateByUUID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AdminUserUpdateByUUIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).AdminUserUpdateByUUID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_AdminUserUpdateByUUID_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).AdminUserUpdateByUUID(ctx, req.(*AdminUserUpdateByUUIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_AdminUserUpdateByUsername_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AdminUserUpdateByUsernameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).AdminUserUpdateByUsername(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_AdminUserUpdateByUsername_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).AdminUserUpdateByUsername(ctx, req.(*AdminUserUpdateByUsernameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_AdminUserDeleteByUUID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AdminUserDeleteByUUIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).AdminUserDeleteByUUID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_AdminUserDeleteByUUID_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).AdminUserDeleteByUUID(ctx, req.(*AdminUserDeleteByUUIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_AdminUserDeleteByUsername_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AdminUserDeleteByUsernameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).AdminUserDeleteByUsername(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_AdminUserDeleteByUsername_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).AdminUserDeleteByUsername(ctx, req.(*AdminUserDeleteByUsernameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_AdminUserList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AdminUserListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).AdminUserList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_AdminUserList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).AdminUserList(ctx, req.(*AdminUserListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_Login_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoginRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).Login(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_Login_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).Login(ctx, req.(*LoginRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_Logout_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LogoutRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).Logout(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_Logout_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).Logout(ctx, req.(*LogoutRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_ValidateToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ValidateTokenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).ValidateToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_ValidateToken_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).ValidateToken(ctx, req.(*ValidateTokenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_GetRSA256PublicKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRSA256PublicKeyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).GetRSA256PublicKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_GetRSA256PublicKey_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).GetRSA256PublicKey(ctx, req.(*GetRSA256PublicKeyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_RefreshToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RefreshTokenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).RefreshToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_RefreshToken_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).RefreshToken(ctx, req.(*RefreshTokenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// UserService_ServiceDesc is the grpc.ServiceDesc for UserService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var UserService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "workgame.UserService",
	HandlerType: (*UserServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "DepartmentCreate",
			Handler:    _UserService_DepartmentCreate_Handler,
		},
		{
			MethodName: "DepartmentRead",
			Handler:    _UserService_DepartmentRead_Handler,
		},
		{
			MethodName: "DepartmentUpdate",
			Handler:    _UserService_DepartmentUpdate_Handler,
		},
		{
			MethodName: "DepartmentDelete",
			Handler:    _UserService_DepartmentDelete_Handler,
		},
		{
			MethodName: "DepartmentList",
			Handler:    _UserService_DepartmentList_Handler,
		},
		{
			MethodName: "SelfUserRegister",
			Handler:    _UserService_SelfUserRegister_Handler,
		},
		{
			MethodName: "SelfUserRead",
			Handler:    _UserService_SelfUserRead_Handler,
		},
		{
			MethodName: "SelfUserUpdate",
			Handler:    _UserService_SelfUserUpdate_Handler,
		},
		{
			MethodName: "SelfUserDelete",
			Handler:    _UserService_SelfUserDelete_Handler,
		},
		{
			MethodName: "ChangePassword",
			Handler:    _UserService_ChangePassword_Handler,
		},
		{
			MethodName: "AdminUserRegister",
			Handler:    _UserService_AdminUserRegister_Handler,
		},
		{
			MethodName: "AdminUserReadByUUID",
			Handler:    _UserService_AdminUserReadByUUID_Handler,
		},
		{
			MethodName: "AdminUserReadByUsername",
			Handler:    _UserService_AdminUserReadByUsername_Handler,
		},
		{
			MethodName: "AdminUserUpdateByUUID",
			Handler:    _UserService_AdminUserUpdateByUUID_Handler,
		},
		{
			MethodName: "AdminUserUpdateByUsername",
			Handler:    _UserService_AdminUserUpdateByUsername_Handler,
		},
		{
			MethodName: "AdminUserDeleteByUUID",
			Handler:    _UserService_AdminUserDeleteByUUID_Handler,
		},
		{
			MethodName: "AdminUserDeleteByUsername",
			Handler:    _UserService_AdminUserDeleteByUsername_Handler,
		},
		{
			MethodName: "AdminUserList",
			Handler:    _UserService_AdminUserList_Handler,
		},
		{
			MethodName: "Login",
			Handler:    _UserService_Login_Handler,
		},
		{
			MethodName: "Logout",
			Handler:    _UserService_Logout_Handler,
		},
		{
			MethodName: "ValidateToken",
			Handler:    _UserService_ValidateToken_Handler,
		},
		{
			MethodName: "GetRSA256PublicKey",
			Handler:    _UserService_GetRSA256PublicKey_Handler,
		},
		{
			MethodName: "RefreshToken",
			Handler:    _UserService_RefreshToken_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "user_service.proto",
}
