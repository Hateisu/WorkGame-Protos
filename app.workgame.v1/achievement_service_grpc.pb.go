// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.28.2
// source: achievement_service.proto

package workgame

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	AchievementService_CreateAchievement_FullMethodName     = "/workgame.AchievementService/CreateAchievement"
	AchievementService_ReadAchievement_FullMethodName       = "/workgame.AchievementService/ReadAchievement"
	AchievementService_UpdateAchievement_FullMethodName     = "/workgame.AchievementService/UpdateAchievement"
	AchievementService_DeleteAchievement_FullMethodName     = "/workgame.AchievementService/DeleteAchievement"
	AchievementService_GiveAchievement_FullMethodName       = "/workgame.AchievementService/GiveAchievement"
	AchievementService_ListAchievements_FullMethodName      = "/workgame.AchievementService/ListAchievements"
	AchievementService_GetUUIDsByAchievement_FullMethodName = "/workgame.AchievementService/GetUUIDsByAchievement"
)

// AchievementServiceClient is the client API for AchievementService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AchievementServiceClient interface {
	// Crud for Achievements
	CreateAchievement(ctx context.Context, in *CreateAchievementRequest, opts ...grpc.CallOption) (*CreateAchievementResponse, error)
	ReadAchievement(ctx context.Context, in *ReadAchievementRequest, opts ...grpc.CallOption) (*ReadAchievementResponse, error)
	UpdateAchievement(ctx context.Context, in *UpdateAchievementRequest, opts ...grpc.CallOption) (*UpdateAchievementResponse, error)
	DeleteAchievement(ctx context.Context, in *DeleteAchievementRequest, opts ...grpc.CallOption) (*DeleteAchievementResponse, error)
	// Give Achievement
	GiveAchievement(ctx context.Context, in *GiveAchievementRequest, opts ...grpc.CallOption) (*GiveAchievementResponse, error)
	// Get List Achievements
	ListAchievements(ctx context.Context, in *ListAchievementsRequest, opts ...grpc.CallOption) (*ListAchievementsResponse, error)
	// Get UUIDs by achievement
	GetUUIDsByAchievement(ctx context.Context, in *GetUUIDsByAchievementRequest, opts ...grpc.CallOption) (*GetUUIDsByAchievementResponse, error)
}

type achievementServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewAchievementServiceClient(cc grpc.ClientConnInterface) AchievementServiceClient {
	return &achievementServiceClient{cc}
}

func (c *achievementServiceClient) CreateAchievement(ctx context.Context, in *CreateAchievementRequest, opts ...grpc.CallOption) (*CreateAchievementResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateAchievementResponse)
	err := c.cc.Invoke(ctx, AchievementService_CreateAchievement_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *achievementServiceClient) ReadAchievement(ctx context.Context, in *ReadAchievementRequest, opts ...grpc.CallOption) (*ReadAchievementResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ReadAchievementResponse)
	err := c.cc.Invoke(ctx, AchievementService_ReadAchievement_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *achievementServiceClient) UpdateAchievement(ctx context.Context, in *UpdateAchievementRequest, opts ...grpc.CallOption) (*UpdateAchievementResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateAchievementResponse)
	err := c.cc.Invoke(ctx, AchievementService_UpdateAchievement_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *achievementServiceClient) DeleteAchievement(ctx context.Context, in *DeleteAchievementRequest, opts ...grpc.CallOption) (*DeleteAchievementResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteAchievementResponse)
	err := c.cc.Invoke(ctx, AchievementService_DeleteAchievement_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *achievementServiceClient) GiveAchievement(ctx context.Context, in *GiveAchievementRequest, opts ...grpc.CallOption) (*GiveAchievementResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GiveAchievementResponse)
	err := c.cc.Invoke(ctx, AchievementService_GiveAchievement_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *achievementServiceClient) ListAchievements(ctx context.Context, in *ListAchievementsRequest, opts ...grpc.CallOption) (*ListAchievementsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListAchievementsResponse)
	err := c.cc.Invoke(ctx, AchievementService_ListAchievements_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *achievementServiceClient) GetUUIDsByAchievement(ctx context.Context, in *GetUUIDsByAchievementRequest, opts ...grpc.CallOption) (*GetUUIDsByAchievementResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetUUIDsByAchievementResponse)
	err := c.cc.Invoke(ctx, AchievementService_GetUUIDsByAchievement_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AchievementServiceServer is the server API for AchievementService service.
// All implementations must embed UnimplementedAchievementServiceServer
// for forward compatibility.
type AchievementServiceServer interface {
	// Crud for Achievements
	CreateAchievement(context.Context, *CreateAchievementRequest) (*CreateAchievementResponse, error)
	ReadAchievement(context.Context, *ReadAchievementRequest) (*ReadAchievementResponse, error)
	UpdateAchievement(context.Context, *UpdateAchievementRequest) (*UpdateAchievementResponse, error)
	DeleteAchievement(context.Context, *DeleteAchievementRequest) (*DeleteAchievementResponse, error)
	// Give Achievement
	GiveAchievement(context.Context, *GiveAchievementRequest) (*GiveAchievementResponse, error)
	// Get List Achievements
	ListAchievements(context.Context, *ListAchievementsRequest) (*ListAchievementsResponse, error)
	// Get UUIDs by achievement
	GetUUIDsByAchievement(context.Context, *GetUUIDsByAchievementRequest) (*GetUUIDsByAchievementResponse, error)
	mustEmbedUnimplementedAchievementServiceServer()
}

// UnimplementedAchievementServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedAchievementServiceServer struct{}

func (UnimplementedAchievementServiceServer) CreateAchievement(context.Context, *CreateAchievementRequest) (*CreateAchievementResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateAchievement not implemented")
}
func (UnimplementedAchievementServiceServer) ReadAchievement(context.Context, *ReadAchievementRequest) (*ReadAchievementResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReadAchievement not implemented")
}
func (UnimplementedAchievementServiceServer) UpdateAchievement(context.Context, *UpdateAchievementRequest) (*UpdateAchievementResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateAchievement not implemented")
}
func (UnimplementedAchievementServiceServer) DeleteAchievement(context.Context, *DeleteAchievementRequest) (*DeleteAchievementResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteAchievement not implemented")
}
func (UnimplementedAchievementServiceServer) GiveAchievement(context.Context, *GiveAchievementRequest) (*GiveAchievementResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GiveAchievement not implemented")
}
func (UnimplementedAchievementServiceServer) ListAchievements(context.Context, *ListAchievementsRequest) (*ListAchievementsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListAchievements not implemented")
}
func (UnimplementedAchievementServiceServer) GetUUIDsByAchievement(context.Context, *GetUUIDsByAchievementRequest) (*GetUUIDsByAchievementResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUUIDsByAchievement not implemented")
}
func (UnimplementedAchievementServiceServer) mustEmbedUnimplementedAchievementServiceServer() {}
func (UnimplementedAchievementServiceServer) testEmbeddedByValue()                            {}

// UnsafeAchievementServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AchievementServiceServer will
// result in compilation errors.
type UnsafeAchievementServiceServer interface {
	mustEmbedUnimplementedAchievementServiceServer()
}

func RegisterAchievementServiceServer(s grpc.ServiceRegistrar, srv AchievementServiceServer) {
	// If the following call pancis, it indicates UnimplementedAchievementServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&AchievementService_ServiceDesc, srv)
}

func _AchievementService_CreateAchievement_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateAchievementRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AchievementServiceServer).CreateAchievement(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AchievementService_CreateAchievement_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AchievementServiceServer).CreateAchievement(ctx, req.(*CreateAchievementRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AchievementService_ReadAchievement_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReadAchievementRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AchievementServiceServer).ReadAchievement(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AchievementService_ReadAchievement_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AchievementServiceServer).ReadAchievement(ctx, req.(*ReadAchievementRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AchievementService_UpdateAchievement_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateAchievementRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AchievementServiceServer).UpdateAchievement(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AchievementService_UpdateAchievement_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AchievementServiceServer).UpdateAchievement(ctx, req.(*UpdateAchievementRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AchievementService_DeleteAchievement_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteAchievementRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AchievementServiceServer).DeleteAchievement(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AchievementService_DeleteAchievement_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AchievementServiceServer).DeleteAchievement(ctx, req.(*DeleteAchievementRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AchievementService_GiveAchievement_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GiveAchievementRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AchievementServiceServer).GiveAchievement(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AchievementService_GiveAchievement_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AchievementServiceServer).GiveAchievement(ctx, req.(*GiveAchievementRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AchievementService_ListAchievements_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListAchievementsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AchievementServiceServer).ListAchievements(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AchievementService_ListAchievements_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AchievementServiceServer).ListAchievements(ctx, req.(*ListAchievementsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AchievementService_GetUUIDsByAchievement_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUUIDsByAchievementRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AchievementServiceServer).GetUUIDsByAchievement(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AchievementService_GetUUIDsByAchievement_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AchievementServiceServer).GetUUIDsByAchievement(ctx, req.(*GetUUIDsByAchievementRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// AchievementService_ServiceDesc is the grpc.ServiceDesc for AchievementService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AchievementService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "workgame.AchievementService",
	HandlerType: (*AchievementServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateAchievement",
			Handler:    _AchievementService_CreateAchievement_Handler,
		},
		{
			MethodName: "ReadAchievement",
			Handler:    _AchievementService_ReadAchievement_Handler,
		},
		{
			MethodName: "UpdateAchievement",
			Handler:    _AchievementService_UpdateAchievement_Handler,
		},
		{
			MethodName: "DeleteAchievement",
			Handler:    _AchievementService_DeleteAchievement_Handler,
		},
		{
			MethodName: "GiveAchievement",
			Handler:    _AchievementService_GiveAchievement_Handler,
		},
		{
			MethodName: "ListAchievements",
			Handler:    _AchievementService_ListAchievements_Handler,
		},
		{
			MethodName: "GetUUIDsByAchievement",
			Handler:    _AchievementService_GetUUIDsByAchievement_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "achievement_service.proto",
}
