// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.28.2
// source: wallet_service.proto

package workgame

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	WalletService_AddWalletCoins_FullMethodName               = "/workgame.WalletService/AddWalletCoins"
	WalletService_RemoveWalletCoins_FullMethodName            = "/workgame.WalletService/RemoveWalletCoins"
	WalletService_GetWalletBalance_FullMethodName             = "/workgame.WalletService/GetWalletBalance"
	WalletService_ChangeWalletOwnership_FullMethodName        = "/workgame.WalletService/ChangeWalletOwnership"
	WalletService_SendWalletCoins_FullMethodName              = "/workgame.WalletService/SendWalletCoins"
	WalletService_GetWalletTransactionsHistory_FullMethodName = "/workgame.WalletService/GetWalletTransactionsHistory"
)

// WalletServiceClient is the client API for WalletService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// Auth is service for managing permissions and roles.
type WalletServiceClient interface {
	// Add Coins to the Wallet
	AddWalletCoins(ctx context.Context, in *AddWalletCoinsRequest, opts ...grpc.CallOption) (*AddWalletCoinsResponse, error)
	// Remove Coins from the Wallet
	RemoveWalletCoins(ctx context.Context, in *RemoveWalletCoinsRequest, opts ...grpc.CallOption) (*RemoveWalletCoinsResponse, error)
	// Get the Wallet balance
	GetWalletBalance(ctx context.Context, in *GetWalletBalanceRequest, opts ...grpc.CallOption) (*GetWalletBalanceResponse, error)
	// Change the Wallet Ownership
	ChangeWalletOwnership(ctx context.Context, in *ChangeWalletOwnershipRequest, opts ...grpc.CallOption) (*ChangeWalletOwnershipResponse, error)
	// Transfer Coins to the another Wallet
	SendWalletCoins(ctx context.Context, in *SendWalletCoinsRequest, opts ...grpc.CallOption) (*SendWalletCoinsResponse, error)
	// Get the Wallet Transactions
	GetWalletTransactionsHistory(ctx context.Context, in *GetWalletTransactionsHistoryRequest, opts ...grpc.CallOption) (*GetWalletTransactionsHistoryResponse, error)
}

type walletServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewWalletServiceClient(cc grpc.ClientConnInterface) WalletServiceClient {
	return &walletServiceClient{cc}
}

func (c *walletServiceClient) AddWalletCoins(ctx context.Context, in *AddWalletCoinsRequest, opts ...grpc.CallOption) (*AddWalletCoinsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AddWalletCoinsResponse)
	err := c.cc.Invoke(ctx, WalletService_AddWalletCoins_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletServiceClient) RemoveWalletCoins(ctx context.Context, in *RemoveWalletCoinsRequest, opts ...grpc.CallOption) (*RemoveWalletCoinsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RemoveWalletCoinsResponse)
	err := c.cc.Invoke(ctx, WalletService_RemoveWalletCoins_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletServiceClient) GetWalletBalance(ctx context.Context, in *GetWalletBalanceRequest, opts ...grpc.CallOption) (*GetWalletBalanceResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetWalletBalanceResponse)
	err := c.cc.Invoke(ctx, WalletService_GetWalletBalance_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletServiceClient) ChangeWalletOwnership(ctx context.Context, in *ChangeWalletOwnershipRequest, opts ...grpc.CallOption) (*ChangeWalletOwnershipResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ChangeWalletOwnershipResponse)
	err := c.cc.Invoke(ctx, WalletService_ChangeWalletOwnership_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletServiceClient) SendWalletCoins(ctx context.Context, in *SendWalletCoinsRequest, opts ...grpc.CallOption) (*SendWalletCoinsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SendWalletCoinsResponse)
	err := c.cc.Invoke(ctx, WalletService_SendWalletCoins_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletServiceClient) GetWalletTransactionsHistory(ctx context.Context, in *GetWalletTransactionsHistoryRequest, opts ...grpc.CallOption) (*GetWalletTransactionsHistoryResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetWalletTransactionsHistoryResponse)
	err := c.cc.Invoke(ctx, WalletService_GetWalletTransactionsHistory_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// WalletServiceServer is the server API for WalletService service.
// All implementations must embed UnimplementedWalletServiceServer
// for forward compatibility.
//
// Auth is service for managing permissions and roles.
type WalletServiceServer interface {
	// Add Coins to the Wallet
	AddWalletCoins(context.Context, *AddWalletCoinsRequest) (*AddWalletCoinsResponse, error)
	// Remove Coins from the Wallet
	RemoveWalletCoins(context.Context, *RemoveWalletCoinsRequest) (*RemoveWalletCoinsResponse, error)
	// Get the Wallet balance
	GetWalletBalance(context.Context, *GetWalletBalanceRequest) (*GetWalletBalanceResponse, error)
	// Change the Wallet Ownership
	ChangeWalletOwnership(context.Context, *ChangeWalletOwnershipRequest) (*ChangeWalletOwnershipResponse, error)
	// Transfer Coins to the another Wallet
	SendWalletCoins(context.Context, *SendWalletCoinsRequest) (*SendWalletCoinsResponse, error)
	// Get the Wallet Transactions
	GetWalletTransactionsHistory(context.Context, *GetWalletTransactionsHistoryRequest) (*GetWalletTransactionsHistoryResponse, error)
	mustEmbedUnimplementedWalletServiceServer()
}

// UnimplementedWalletServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedWalletServiceServer struct{}

func (UnimplementedWalletServiceServer) AddWalletCoins(context.Context, *AddWalletCoinsRequest) (*AddWalletCoinsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddWalletCoins not implemented")
}
func (UnimplementedWalletServiceServer) RemoveWalletCoins(context.Context, *RemoveWalletCoinsRequest) (*RemoveWalletCoinsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveWalletCoins not implemented")
}
func (UnimplementedWalletServiceServer) GetWalletBalance(context.Context, *GetWalletBalanceRequest) (*GetWalletBalanceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetWalletBalance not implemented")
}
func (UnimplementedWalletServiceServer) ChangeWalletOwnership(context.Context, *ChangeWalletOwnershipRequest) (*ChangeWalletOwnershipResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChangeWalletOwnership not implemented")
}
func (UnimplementedWalletServiceServer) SendWalletCoins(context.Context, *SendWalletCoinsRequest) (*SendWalletCoinsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendWalletCoins not implemented")
}
func (UnimplementedWalletServiceServer) GetWalletTransactionsHistory(context.Context, *GetWalletTransactionsHistoryRequest) (*GetWalletTransactionsHistoryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetWalletTransactionsHistory not implemented")
}
func (UnimplementedWalletServiceServer) mustEmbedUnimplementedWalletServiceServer() {}
func (UnimplementedWalletServiceServer) testEmbeddedByValue()                       {}

// UnsafeWalletServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to WalletServiceServer will
// result in compilation errors.
type UnsafeWalletServiceServer interface {
	mustEmbedUnimplementedWalletServiceServer()
}

func RegisterWalletServiceServer(s grpc.ServiceRegistrar, srv WalletServiceServer) {
	// If the following call pancis, it indicates UnimplementedWalletServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&WalletService_ServiceDesc, srv)
}

func _WalletService_AddWalletCoins_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddWalletCoinsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletServiceServer).AddWalletCoins(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WalletService_AddWalletCoins_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletServiceServer).AddWalletCoins(ctx, req.(*AddWalletCoinsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WalletService_RemoveWalletCoins_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveWalletCoinsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletServiceServer).RemoveWalletCoins(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WalletService_RemoveWalletCoins_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletServiceServer).RemoveWalletCoins(ctx, req.(*RemoveWalletCoinsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WalletService_GetWalletBalance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetWalletBalanceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletServiceServer).GetWalletBalance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WalletService_GetWalletBalance_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletServiceServer).GetWalletBalance(ctx, req.(*GetWalletBalanceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WalletService_ChangeWalletOwnership_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChangeWalletOwnershipRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletServiceServer).ChangeWalletOwnership(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WalletService_ChangeWalletOwnership_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletServiceServer).ChangeWalletOwnership(ctx, req.(*ChangeWalletOwnershipRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WalletService_SendWalletCoins_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendWalletCoinsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletServiceServer).SendWalletCoins(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WalletService_SendWalletCoins_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletServiceServer).SendWalletCoins(ctx, req.(*SendWalletCoinsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WalletService_GetWalletTransactionsHistory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetWalletTransactionsHistoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletServiceServer).GetWalletTransactionsHistory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WalletService_GetWalletTransactionsHistory_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletServiceServer).GetWalletTransactionsHistory(ctx, req.(*GetWalletTransactionsHistoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// WalletService_ServiceDesc is the grpc.ServiceDesc for WalletService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var WalletService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "workgame.WalletService",
	HandlerType: (*WalletServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddWalletCoins",
			Handler:    _WalletService_AddWalletCoins_Handler,
		},
		{
			MethodName: "RemoveWalletCoins",
			Handler:    _WalletService_RemoveWalletCoins_Handler,
		},
		{
			MethodName: "GetWalletBalance",
			Handler:    _WalletService_GetWalletBalance_Handler,
		},
		{
			MethodName: "ChangeWalletOwnership",
			Handler:    _WalletService_ChangeWalletOwnership_Handler,
		},
		{
			MethodName: "SendWalletCoins",
			Handler:    _WalletService_SendWalletCoins_Handler,
		},
		{
			MethodName: "GetWalletTransactionsHistory",
			Handler:    _WalletService_GetWalletTransactionsHistory_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "wallet_service.proto",
}
